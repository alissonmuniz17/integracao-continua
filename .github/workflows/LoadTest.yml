name: LoadTest

on:
  workflow_call:

jobs:
  loadtest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configura credenciais AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ID_CHAVE_ACESSO }}
        aws-secret-access-key: ${{ secrets.CHAVE_SECRETA }}
        aws-region: us-east-2

    - name: Clona repositório de infraestrutura
      run: git clone https://github.com/alissonmuniz17/teste-de-carga.git

    - name: Instala Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform -chdir=teste-de-carga/env/Homolog init

    - name: Terraform Destroy (limpeza anterior)
      run: terraform -chdir=teste-de-carga/env/Homolog destroy -auto-approve

    - name: Terraform Apply (cria infra)
      run: terraform -chdir=teste-de-carga/env/Homolog apply -auto-approve

    - name: Captura DNS do ALB
      id: alb
      run: |
        alb_dns=$(terraform -chdir=teste-de-carga/env/Homolog output -raw alb_dns)
        echo "alb_dns=$alb_dns" >> $GITHUB_OUTPUT

    - name: Aguarda ALB ficar disponível
      run: |
        echo "Aguardando ALB subir..."
        sleep 60
        echo "Verificando se ALB responde..."
        for i in {1..10}; do
          if curl -s --head http://${{ steps.alb.outputs.alb_dns }} | grep "200 OK" > /dev/null; then
            echo "ALB está respondendo"
            break
          else
            echo "Tentativa $i: ALB não respondeu ainda..."
            sleep 10
          fi
        done

    - name: Instala Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Instala dependências do Locust
      uses: BSFishy/pip-action@v1
      with:
        packages: |
          locust

    - name: Cria locustfile.py
      run: |
        echo "from locust import HttpUser, TaskSet, task, between" > locustfile.py
        echo "" >> locustfile.py
        echo "class UserTasks(TaskSet):" >> locustfile.py
        echo "    @task" >> locustfile.py
        echo "    def index(self):" >> locustfile.py
        echo '        self.client.get("/alisson")' >> locustfile.py
        echo "" >> locustfile.py
        echo "class WebsiteUser(HttpUser):" >> locustfile.py
        echo "    tasks = [UserTasks]" >> locustfile.py
        echo "    wait_time = between(1, 5)" >> locustfile.py

    - name: Executa teste de carga com Locust
      run: |
        locust -f locustfile.py --headless -u 10 -r 5 --run-time 60s -H http://${{ steps.alb.outputs.alb_dns }}

    - name: Terraform Destroy (encerra infraestrutura)
      run: terraform -chdir=teste-de-carga/env/Homolog destroy -auto-approve
